<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>iStoreOS For RTD1296 固件与刷机教程</title>
      <link href="/posts/d8b53bb4/"/>
      <url>/posts/d8b53bb4/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>受群友（等待）提供主板并委托移植固件，经过长时间的努力最终基于EasyPi的iStoreOS成功移植OpenWrt固件。</p><h1 id="固件玩法"><a href="#固件玩法" class="headerlink" title="固件玩法"></a>固件玩法</h1><p>可以参考EasePi官方的文档进行玩机。</p><p><a href="https://doc.linkease.com/zh/guide/easepi/common.html">EasePi文档链接</a></p><h1 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h1><p>本固件为保障原作者在售的ARS2硬件的商业利益，阉割了在线升级与离线升级功能，基于矿渣利用的想法提供了该固件，后期的更新会平均晚于EasePi官网2-3个版本更新一次。</p><h1 id="刷机教程"><a href="#刷机教程" class="headerlink" title="刷机教程"></a>刷机教程</h1><h2 id="硬件准备"><a href="#硬件准备" class="headerlink" title="硬件准备"></a>硬件准备</h2><ol><li>RTD1296 主板一块</li><li>USB To TTL 转换器一个</li><li>U盘一个</li></ol><h2 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h2><ol><li><a href="iStoreOS-For-RTD1296-%E5%9B%BA%E4%BB%B6%E5%8F%91%E5%B8%83/U-Boot.zip">UBoot 固件</a></li><li><a href="https://cloud.189.cn/web/share?code=ze6FNvUVvQFr">UBoot 刷写软件</a>（访问码：6z7v）</li><li><a href="https://cloud.189.cn/web/share?code=uuAjIfeU73Qz">iStoreOS For RTD1296固件</a>（访问码：4fqu）</li><li><a href="https://cloud.189.cn/web/share?code=7ZrYrmR3eiee">Xshell</a>（访问码：5scz）</li></ol><h2 id="TTL连接"><a href="#TTL连接" class="headerlink" title="TTL连接"></a>TTL连接</h2><h3 id="主板TTL定义"><a href="#主板TTL定义" class="headerlink" title="主板TTL定义"></a>主板TTL定义</h3><p>主板的TTL定义请参考下图：</p><img src="/posts/undefined/%E4%B8%BB%E6%9D%BF%E5%9B%BE-TTL%E5%AE%9A%E4%B9%89%E8%AF%B4%E6%98%8E.png" class="" title="主板图-TTL定义说明"><h3 id="USB-TTL定义"><a href="#USB-TTL定义" class="headerlink" title="USB TTL定义"></a>USB TTL定义</h3><img src="/posts/undefined/USB-TTL.jpg" class="" title="USB-TTL定义说明"><h3 id="主板与USB-TTL接线示意"><a href="#主板与USB-TTL接线示意" class="headerlink" title="主板与USB TTL接线示意"></a>主板与USB TTL接线示意</h3><h2 id="UBoot-刷写"><a href="#UBoot-刷写" class="headerlink" title="UBoot 刷写"></a>UBoot 刷写</h2><h3 id="1-UBoot刷机软件配置"><a href="#1-UBoot刷机软件配置" class="headerlink" title="1.UBoot刷机软件配置"></a>1.UBoot刷机软件配置</h3><p>打开[boot_recovery.exe]，按照下图进行设置：</p><img src="/posts/undefined/boot_recover%E8%AE%BE%E7%BD%AE.png" class="" title="设置信息"><div class="note danger flat"><p>COM Port ：点击选项一般选择数字最大那个。<br>BaudRate ： 设置成[115200]。<br>HW Setting File ：选择[ABCTel_RTD1296_4DDR4_8Gb_s1866_emmc.config]。<br>dvrboot.bin File : 选择[ABCTel_RTD1296_4DDR4_8Gb_s1866_emmc.bin]。<br>LK option : 必须勾选。</p></div><h3 id="2-操作步骤"><a href="#2-操作步骤" class="headerlink" title="2.操作步骤"></a>2.操作步骤</h3><p>首先：将USB-TTL与电脑和主板连接好。<br>然后：主板保持断电状态。<br>之后：UBoot刷机软件点击[Write]。<br>最后：给主板通电即可。</p><p>出现下图情况表示开始刷机：</p><img src="/posts/undefined/UBoot%E5%BC%80%E5%A7%8B%E5%88%B7%E6%9C%BA.png" class="" title="开始刷机状态"><p>等待出现下图表示UBoot刷机成功：</p><img src="/posts/undefined/%E5%88%B7%E6%9C%BA%E6%88%90%E5%8A%9F%E6%8F%90%E7%A4%BA.png" class="" title="刷机成功提示"><p>现在请：断开主板电源！！！断开主板电源！！！断开主板电源！！！</p><h3 id="3-准备固件升级U盘"><a href="#3-准备固件升级U盘" class="headerlink" title="3.准备固件升级U盘"></a>3.准备固件升级U盘</h3><ol><li>将U盘格式化为FAT32格式（如果windows格式化无FAT32选项，请用DG分区工具）。</li><li>检查U盘是否是MBR分区表。</li><li>将[iStoreOS For RTD1296固件包]内的4个文件复制到U盘的根目录备用。</li></ol><h3 id="4-新UBoot启动参数配置"><a href="#4-新UBoot启动参数配置" class="headerlink" title="4.新UBoot启动参数配置"></a>4.新UBoot启动参数配置</h3><p>打开你喜欢的串口调试工具（这里我使用的是xshell，你也可以使用超级终端或者其它你顺手的工具）并自行配置好串口访问参数。</p><p>配置好之后就打开端口，等到出现下图这样：</p><img src="/posts/undefined/xshell%E7%AD%89%E5%BE%85%E7%95%8C%E9%9D%A2.png" class="" title="xshell等待界面"><div class="note danger flat"><p>注意按照下面步骤严格操作</p><ol><li>用鼠标点击黑色框一次。</li><li>一只手按住键盘的[ESC]键，一只手给主板接通电源。</li><li>等待xshell窗口左下角出现 ABCTel&gt; 即可松开[ESC]。</li></ol><img src="/posts/undefined/%E8%BF%9B%E5%85%A5UBOOT%E7%95%8C%E9%9D%A2.png" class="" title="UBOOT进入界面"><ol start="4"><li>按一次[回车键]。</li><li>依次按顺序输入以下3条命令:</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">setenv kernelargs &quot;init=/etc/init root=/dev/mmcblk0p1 rootfstype=squashfs overlay=/dev/mmcblk0p2 overlayfs=ext4 rootwait loglevel=8&quot;</span><br><span class="line">setenv bootargs &quot;&quot;</span><br><span class="line">save</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/posts/undefined/%E5%91%BD%E4%BB%A4%E8%BE%93%E5%85%A5%E7%95%8C%E9%9D%A2.png" class="" title="命令完成界面"></div><p>好了，可以看下步刷入固件了。</p><h3 id="5-刷入固件"><a href="#5-刷入固件" class="headerlink" title="5.刷入固件"></a>5.刷入固件</h3><p>继续上一步的命令操作。</p><ol><li>插入第<a href="#3%E5%87%86%E5%A4%87%E5%9B%BA%E4%BB%B6%E5%8D%87%E7%BA%A7u%E7%9B%98">第三步</a>准备的U盘</li><li>在xshell中输入</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">go ru</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/posts/undefined/%E5%BC%80%E5%A7%8Bgoru.png" class="" title="开始刷机"><ol start="3"><li>等待固件刷入完毕</li></ol><p>刷入过程中，请耐心等待，预计时间5-10分钟左右，直到下图界面：</p><img src="/posts/undefined/%E5%88%B7%E5%85%A5%E6%88%90%E5%8A%9F.png" class="" title="刷入成功"><ol start="4"><li>按下[Enter]键进入OpenWRT操作界面，如下图：</li></ol><img src="/posts/undefined/%E8%BF%9B%E5%85%A5op.png" class="" title="OP控制台"><h3 id="刷入完成"><a href="#刷入完成" class="headerlink" title="刷入完成"></a>刷入完成</h3><h1 id="其它说明"><a href="#其它说明" class="headerlink" title="其它说明"></a>其它说明</h1><h2 id="网口顺序说明"><a href="#网口顺序说明" class="headerlink" title="网口顺序说明"></a>网口顺序说明</h2><p>靠近DC口的网口是wan口，旁边的就是lan口</p><h2 id="默认账号密码"><a href="#默认账号密码" class="headerlink" title="默认账号密码"></a>默认账号密码</h2><p>账号：root<br>密码：空或者password</p><h1 id="特别感谢"><a href="#特别感谢" class="headerlink" title="特别感谢"></a>特别感谢</h1><table><thead><tr><th align="left">Name</th><th align="left">Logo</th><th align="left">Github</th><th align="left">About</th></tr></thead><tbody><tr><td align="left">等待</td><td align="left"><img src="iStoreOS-For-RTD1296-固件发布/等待.jpg" alt="等待" width="50" height="50" /></td><td align="left"><a href="#">Follow</a></td><td align="left">没有这未兄弟提供的板子，也就不会有这个固件了,如果你在这里下固件，请心中默念：感谢等待。</td></tr><tr><td align="left">滑水大王</td><td align="left"><img src="iStoreOS-For-RTD1296-固件发布/滑水大王.jpg" alt="等待" width="50" height="50" /></td><td align="left"><a href="https://github.com/cskyz">Follow</a></td><td align="left">大佬几句话就加速了这个固件的完美移植</td></tr><tr><td align="left">Sliot</td><td align="left"><img src="iStoreOS-For-RTD1296-固件发布/Sliot.jpg" alt="等待" width="50" height="50" /></td><td align="left"><a href="#">Follow</a></td><td align="left">感谢兄弟的耐心测试和问题反馈，帮助移植工作的顺利开展</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7200U安装PVE至Emmc</title>
      <link href="/posts/8d85f16d/"/>
      <url>/posts/8d85f16d/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这款7200U主板在安装PVE至emmc过程中，最后会提示安装失败，经过搜索引擎的帮助，终于找到正确安装方式。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>正常启动PVE安装程序，进入安装初始化界面。</li><li>启动后点击 Install Proxmox VE （Debug Mode）。</li><li>在第一次提示输入命令的时候输入 Ctrl-D ，继续安装过程。</li><li>在第二次提示输入命令的时候输入脚本编辑命令，如下：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/bin/proxinstall</span><br></pre></td></tr></table></figure></li><li>进入代码编辑界面后，按一次 &#x2F; 键进入查找模式后输入以下内容：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unable to get device</span><br></pre></td></tr></table></figure></li><li>上一步找到后，先按 Entel 键确认改行，再按 i 键进入编辑模式，最后将下面内容进行修改：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改前</span></span><br><span class="line">&#125; elsif ($dev =~ m|^/dev/[^/]+/hd[a-z]$|) &#123;</span><br><span class="line">        return &quot;$&#123;dev&#125;$partnum&quot;;</span><br><span class="line">    &#125; elsif ($dev =~ m|^/dev/nvme\d+n\d+$|) &#123;</span><br><span class="line">        return &quot;$&#123;dev&#125;p$partnum&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        die &quot;unable to get device for partition $partnum on device $dev\n&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改后</span></span><br><span class="line">&#125; elsif ($dev =~ m|^/dev/[^/]+/hd[a-z]$|) &#123;</span><br><span class="line">        return &quot;$&#123;dev&#125;$partnum&quot;;</span><br><span class="line">    &#125; elsif ($dev =~ m|^/dev/nvme\d+n\d+$|) &#123;</span><br><span class="line">        return &quot;$&#123;dev&#125;p$partnum&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return &quot;$&#123;dev&#125;p$partnum&quot;;  # 修改这一行</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>先按 Esc 退出编辑模式，再按输入 :wq 保存退出。</li><li>保存成功后按 Ctrl + D 进入图形安装界面按步骤正常安装即可识别到内置EMMC。</li></ol>]]></content>
      
      
      <categories>
          
          <category> PVE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 7200U </tag>
            
            <tag> PVE </tag>
            
            <tag> EMMC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启爱快（ikuai）内网中公网IPV6地址分配功能及域名解析IPV6地址</title>
      <link href="/posts/72aeb726/"/>
      <url>/posts/72aeb726/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>因IPV4地址全球范围内枯竭，国内三大网络运营商已不再免费提供公网IPV4的地址，就我所在的地区为例，需要开通公网IPV4地址，需要付出每月100RMB的代价，作为资深垃圾佬，这种昂贵的付费方式肯定是不容许的。<br>现在国内三大运营商，给家庭网络基本都提供了IPV6公网地址的分配，但是很多小白对该功能感知不强，加上很多IPV6的复杂概念，让小白用户无从下手，所以诞生了该篇简易教程。<br>在教程的过程中我会指出该方式的安全隐患，小白可结合自己的实际需求考虑是否开通。</p><h1 id="光猫改桥接"><a href="#光猫改桥接" class="headerlink" title="光猫改桥接"></a>光猫改桥接</h1><h2 id="简单方式"><a href="#简单方式" class="headerlink" title="简单方式"></a>简单方式</h2><p>现在改桥接很简单，直接拨打为你提供网络服务对应的运营商电话，要求将光猫改成桥接模式，然后让运营商提供拨号所需的账号、密码即可。</p><div class="note info flat"><p>Q: 请问，您需要我们提供什么服务？<br>A: 需要你这边将我家光猫改成桥接模式，关闭光猫DHCP服务，我使用家里路由器进行拨号上网。<br>Q: 请问，您需要我们提供什么服务？<br>A: 请告诉我家网络拨号使用的账号、密码是什么，我需要对路由器进行设置。</p></div><p>通过以上方式即可让运营商远程将光猫改成桥接模式并获取到拨号使用的账号、密码。</p><div class="note danger flat"><p>如果你家使用的是电信提供的光猫和电信提供的mesh路由器组网，可能会造成无线网络无法连接。<br>这时你需要在后面的教程设置自家路由器拨号后将mesh路由器连接到自家路由，并根据后面的教程进行mesh路由器的网络连接设置。</p></div><h2 id="复杂方式"><a href="#复杂方式" class="headerlink" title="复杂方式"></a>复杂方式</h2><p>通过百度搜索你家光猫型号对应的破解教程，首先破解你家光猫的root权限并获取到登录账号和密码，然后手动设置光猫为桥接，并获取到拨号账号密码。</p><div class="note info flat"><p>因为每家提供的路由器型号或系列不同，设置方法也不同，这方面需要你自己通过百度找到相应教程后参照操作。</p></div><h1 id="软路由设置"><a href="#软路由设置" class="headerlink" title="软路由设置"></a>软路由设置</h1><h2 id="爱快（ikuai）软路由"><a href="#爱快（ikuai）软路由" class="headerlink" title="爱快（ikuai）软路由"></a>爱快（ikuai）软路由</h2><h3 id="配置上网模式"><a href="#配置上网模式" class="headerlink" title="配置上网模式"></a>配置上网模式</h3><img src="/posts/72aeb726/00.png" class=""><div class="note danger flat"><p>这一步对于需要挂网心云、京东云之类的服务，这一步很重要。<br>如设置程NAT1也能避免很多奇怪问题。</p><p>但设置成NAT1后，相当于将你的网络完全暴露在公网，你局域网内的任何设备都可以通过外网进行访问，会对你的网络安全造成极大隐患。</p><p>未避免出现安全问题，我建议你对需要通过IPV6访问的设备才启用获取IPV6地址，其它设备取消IPV6地址的获取，例如：电脑，机顶盒、电视之类的设备。</p></div><h3 id="配置手动拨号"><a href="#配置手动拨号" class="headerlink" title="配置手动拨号"></a>配置手动拨号</h3><ol><li><p>选择连接到光猫的WAN口</p><img src="/posts/72aeb726/01.jpeg" class=""></li><li><p>设置拨号方式</p><img src="/posts/72aeb726/02.jpeg" class=""><p>接入方式选择：ADSL&#x2F;PPPoE拨号<br>账号：输入获取到的账号<br>密码：输入获取到的密码</p></li></ol><p>在保证接线正常的情况下输入完毕以上三项后点击保存即可获取到IP地址。</p><h3 id="配置IPV6分配"><a href="#配置IPV6分配" class="headerlink" title="配置IPV6分配"></a>配置IPV6分配</h3><ol><li><p>启用IPV6功能</p><img src="/posts/72aeb726/03.png" class=""></li><li><p>给予获取到的IPV6地址可以外网访问的权限</p><img src="/posts/72aeb726/04.png" class=""></li></ol><div class="note info flat"><p>到这一步设置完后，重启其它网络设备即可获取到能够外网访问的IPV6地址了。</p></div><h1 id="配置动态域名"><a href="#配置动态域名" class="headerlink" title="配置动态域名"></a>配置动态域名</h1><p>这里配置DDNS是通过ikuai进行的，未使用部分设备自带的DDNS解析功能，这样的好处是管理起来方便，软路由重启后可以及时自动更新。</p><h2 id="DNSPOD"><a href="#DNSPOD" class="headerlink" title="DNSPOD"></a>DNSPOD</h2><h3 id="新建用于访问的IPV6域名"><a href="#新建用于访问的IPV6域名" class="headerlink" title="新建用于访问的IPV6域名"></a>新建用于访问的IPV6域名</h3><img src="/posts/72aeb726/05.png" class=""><h3 id="获取域名管理token"><a href="#获取域名管理token" class="headerlink" title="获取域名管理token"></a>获取域名管理token</h3><p><a href="https://docs.dnspod.cn/account/dnspod-token/">dnspod token获取教程</a></p><p>根据上面的教程获取到ID和token,记录下来，下一步备用。</p><h1 id="爱快（IKuai）创建DDNS自动解析IP"><a href="#爱快（IKuai）创建DDNS自动解析IP" class="headerlink" title="爱快（IKuai）创建DDNS自动解析IP"></a>爱快（IKuai）创建DDNS自动解析IP</h1><ol><li>获取需外网访问设备的DUID</li></ol><img src="/posts/72aeb726/06.png" class=""><div class="note danger flat"><p>一定要根据主机名称和MAC地址获取到正确的DUID，这样才能保证通过域名访问到正确的设备。</p></div><ol start="2"><li>添加域名解析项</li></ol><img src="/posts/72aeb726/07.png" class=""><ol start="4"><li>配置域名解析项</li></ol><img src="/posts/72aeb726/08.png" class=""><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>根据上面的步骤配置完成你就可以通过手机的流量进行访问了。如果存在问题，可在教程下方留下你的联系方式，或者通过右侧的邮箱联系我帮助你排除问题。</p><p>该教程完成得过于仓促，如果存在任何问题或有任何建议评论提出，我会及时调整。</p>]]></content>
      
      
      <categories>
          
          <category> 搞机一下 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ikuai </tag>
            
            <tag> IPV6 </tag>
            
            <tag> DDNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCore X390 4G LTE For OC 0.8.0</title>
      <link href="/posts/a75bec6f/"/>
      <url>/posts/a75bec6f/</url>
      
        <content type="html"><![CDATA[<h1 id="OpenCore-X390-4G-LTE-For-OC-0-8-0"><a href="#OpenCore-X390-4G-LTE-For-OC-0-8-0" class="headerlink" title="OpenCore X390 4G LTE For OC 0.8.0"></a>OpenCore X390 4G LTE For OC 0.8.0</h1><div align="center"><img src="https://img14.360buyimg.com/n0/jfs/t1/122699/10/10858/75075/5f4708e1Eb80b55c6/f276218d450b6840.jpg" width="350px"></div><h1 id="ThinkpadX390-Opencore-EFI"><a href="#ThinkpadX390-Opencore-EFI" class="headerlink" title="ThinkpadX390-Opencore-EFI"></a>ThinkpadX390-Opencore-EFI</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>这包括一个EFI(Opencore)，它在Thinkpad-X390-4GLTE上工作完美</strong></p><ol><li>优化了config.plus部分设置，目前使用体验感觉比较完美。</li><li>电源管理使用的 SMCBatteryManager.kext </li><li>所有kext部分全部更新到最新版本。</li><li>ACPI替换了部分通用SSDT-*.aml文件。</li><li>添加了ThinkPad_ClickPad的aml文件，优化小红点和触控的使用体验，但不确定是不是负优化，欢迎你提供使用反馈。</li><li>添加了OC的原生苹果主题资源，并默认设置为无选项 duang 声后开机。</li><li>添加了PCI设备信息，现在可以在设备管理里查看到PCI硬件的信息了。</li><li>键盘快捷键通过SSDT驱动，不用DSDT打补丁了。</li><li>OC升级到0.8.0了。</li><li>增加了三个常用工具</li></ol><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>git clone <a href="https://github.com/abctel/ThinkPadX390_4GLTE-OpenCore.git">https://github.com/abctel/ThinkPadX390_4GLTE-OpenCore.git</a></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>你的保修单现在无效了。如果你有任何顾虑，请在我的 EFI 取代你的 EFl 之前做一些研究。我不负责任何损失，包括但不限于内核恐慌，设备无法启动或不能正常工作，存储损坏或数据丢失，原子弹爆炸，第三次世界大战，谷歌和苹果都倒闭，等等</p><h2 id="OpenCore版本"><a href="#OpenCore版本" class="headerlink" title="OpenCore版本"></a>OpenCore版本</h2><p>OpenCore 0.8.0</p><h2 id="ThinkPadX390-4G-LTE-OpenCore-Hackintosh"><a href="#ThinkPadX390-4G-LTE-OpenCore-Hackintosh" class="headerlink" title="ThinkPadX390 4G LTE OpenCore Hackintosh"></a>ThinkPadX390 4G LTE OpenCore Hackintosh</h2><p>可以完美地在ThinkPad X390上安装<em>Catalina&#x2F;Big Sur</em>或者任何之前的版本，如<em>Mojave , High Sierra , Sierra , EI Captain , Yosemite , Mavericks ……</em></p><h3 id="测试过的系统"><a href="#测试过的系统" class="headerlink" title="测试过的系统"></a>测试过的系统</h3><p><strong>Monterey</strong></p><ul><li>12.0.0</li><li>12.3.1</li></ul><p><strong>Catalina</strong></p><p>(以下版本如无法正常引导使用请切换到10.15.7分支下载)</p><ul><li>10.15.2</li><li>10.15.3</li><li>10.15.4</li><li>10.15.5</li><li>10.15.6</li><li>10.15.7</li></ul><p><strong>Big Sur</strong></p><ul><li>11.0.1</li><li>11.1</li><li>11.2</li><li>11.2.1</li><li>11.2.2</li><li>11.2.3</li></ul><h2 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h2><table><thead><tr><th align="left">名称</th><th align="left">细节</th></tr></thead><tbody><tr><td align="left">Computer Model</td><td align="left">ThinkPad X390 (39CD)</td></tr><tr><td align="left">CPU</td><td align="left">Intel Core i5-8265U</td></tr><tr><td align="left">Mainboard</td><td align="left">Lenevo 20Q00039CD（I&#x2F;O - 9D84 for mobile 8th Gen Intel Core processor family）</td></tr><tr><td align="left">Displayer</td><td align="left">Lenevo LEN4094 ( 13.3 inch  )</td></tr><tr><td align="left">Memory</td><td align="left">DDR4 2667 Mhz. Onboard 8 GB</td></tr><tr><td align="left">NVMe SSD</td><td align="left">WDC PC SN720 SDBQNTY-500G-1001 (500G&#x2F;SSD)</td></tr><tr><td align="left">Integrated Graphics</td><td align="left">Intel UHD Graphics 620</td></tr><tr><td align="left">Ethernet</td><td align="left">Intel(R) Ethernet Connection (6) I219-V</td></tr><tr><td align="left">Sound Card</td><td align="left">Realtek High Defination Audio@Intel Intel Smart Sound Technology Audio Controller (layoutid:11)</td></tr><tr><td align="left">Wireless Card</td><td align="left">Intel(R) Wireless-AC 9560 160MHz</td></tr><tr><td align="left">LTE 4G</td><td align="left"></td></tr></tbody></table><h2 id="安装及DSDT说明"><a href="#安装及DSDT说明" class="headerlink" title="安装及DSDT说明"></a>安装及DSDT说明</h2><p>从这个版本起，取消dsdt，所有补丁基于HotPatch进行修补，这样适用型可能更广，基本上8th CPU的笔记本都可以一试，尤其是ThinkPad系列的。</p><h2 id="正常工作的部分"><a href="#正常工作的部分" class="headerlink" title="正常工作的部分"></a>正常工作的部分</h2><h3 id="详细的设备驱动情况"><a href="#详细的设备驱动情况" class="headerlink" title="详细的设备驱动情况"></a>详细的设备驱动情况</h3><h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h4><p>功能正常。变频正常。</p><h4 id="电池"><a href="#电池" class="headerlink" title="电池"></a>电池</h4><p>电池电量显示正常。（未测试睡眠时拔下充电器，电池是否准确，欢迎测试反馈）</p><h4 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h4><p>功能正常。（需要一个Dock）</p><h4 id="显卡"><a href="#显卡" class="headerlink" title="显卡"></a>显卡</h4><p>集成显卡的型号是<code>Intel UHD Graphics 620</code>，仿冒<code>Intel UHD Graphics 630 (Mobile)</code><br>TYPE-C 与<code>Intel UHD Graphics 620</code> 连接，功能正常。支持<code>2K@60Hz</code> &amp; <code>4K@30Hz</code> 。（可能正常，代码使用的是上个版本的，最近抽空测试一下）</p><h4 id="声卡"><a href="#声卡" class="headerlink" title="声卡"></a>声卡</h4><p>用AppleALC正常驱动<code>layout-id: 11</code>. 一切功能都正常。</p><h4 id="键盘"><a href="#键盘" class="headerlink" title="键盘"></a>键盘</h4><p>功能正常，</p><h4 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h4><p>NVMe 功能正常并且开启了TRIM.</p><h4 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h4><p>功能正常。（不过intel网卡的蓝牙使用体验很一般啊，确实没有免驱的好用）</p><h4 id="触控板和小红点"><a href="#触控板和小红点" class="headerlink" title="触控板和小红点"></a>触控板和小红点</h4><p>功能正常。Trackpoint和ultranav也工作正常</p><h4 id="无线网卡"><a href="#无线网卡" class="headerlink" title="无线网卡"></a>无线网卡</h4><p>2.4G,5G功能部分正常.<strong>感谢  <a href="https://github.com/OpenIntelWireless/itlwm">@zxystd’s AirportItlwm</a></strong></p><h4 id="内置摄像头"><a href="#内置摄像头" class="headerlink" title="内置摄像头"></a>内置摄像头</h4><p>通过USB内建成功，FaceTime和ipad测试使用正常。</p><h4 id="睡眠"><a href="#睡眠" class="headerlink" title="睡眠"></a>睡眠</h4><p>睡眠完美支持。</p><h4 id="Type-C"><a href="#Type-C" class="headerlink" title="Type-C"></a>Type-C</h4><p>两个Type-C接口使用正常，雷电功能因没有设备，所以未测试。</p><h4 id="睡眠LED灯光"><a href="#睡眠LED灯光" class="headerlink" title="睡眠LED灯光"></a>睡眠LED灯光</h4><p>电源键和小红点呼吸灯可根据睡眠情况自动切换呼吸、常量模式。</p><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><ul><li>睡眠快捷键正常（默认fn+4，因技术不精，还没搞明白如何调整为fn+F12对应键盘图标）</li><li>背光控制正常</li><li>音量控制正常</li></ul><h4 id="背光状态"><a href="#背光状态" class="headerlink" title="背光状态"></a>背光状态</h4><p>背光状态记录正常，睡眠前，唤醒后亮度保持一致。</p><h2 id="已知的问题"><a href="#已知的问题" class="headerlink" title="已知的问题"></a>已知的问题</h2><ul><li>隔空投送和接力无法正常工作</li><li>4GLTE 网卡 无法驱动。</li><li>FaceTime和imeassge 的洗白我自己测试成功了的，如果你有三码洗白的需要请根据OpenCore wiki找到可以使用的序列号和获取en0的mac地址替换就可正常使用。</li></ul><h2 id="推荐的BIOS配置"><a href="#推荐的BIOS配置" class="headerlink" title="推荐的BIOS配置"></a>推荐的BIOS配置</h2><blockquote><p>在进入BIOS之前，请确保您已经禁用了Windows登录密码，因为在按照以下方式配置BIOS后，您可能无法在Windows上使用“PIN”登录。</p></blockquote><ul><li>Security<ul><li>Intel SGX: Software Controlled</li></ul></li><li>Boot<ul><li>Boot Mode: UEFI Only</li></ul></li></ul><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="声卡方面的疑问解答"><a href="#声卡方面的疑问解答" class="headerlink" title="声卡方面的疑问解答"></a>声卡方面的疑问解答</h3><p>如果你在从Windows启动到macOS后遇到了一些奇怪的问题(比如找不到音频设备)，你应该重启回到Windows，并进行冷重启(先关机再启动)回到macOS。在那之后你的音频设备应该回来了。</p><blockquote><p>如果你在你的Hacintosh上使用带有Boot Camp模式的并行桌面，你不应该在macOS中直接重启<br>同样的原因。您应该在并行桌面中手动关闭Windows，然后重新启动macOS(先关闭再启动)。</p></blockquote><p>注意⚠️：目前作者单MacOS系统使用中，这是上个版本遇到的问题和解决方法，请参考使用。</p><h3 id="后续待修复的问题"><a href="#后续待修复的问题" class="headerlink" title="后续待修复的问题"></a>后续待修复的问题</h3><p>电池固件信息修复</p><h2 id="更多帮助"><a href="#更多帮助" class="headerlink" title="更多帮助"></a>更多帮助</h2><ul><li>如需了解更多，请移步原作者的交流贴 <a href="http://bbs.pcbeta.com/viewthread-1852139-1-1.html">远景论坛</a></li></ul><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><ul><li>如果你有任何问题，尽管在Github上提出来，我会尽量帮助你!</li><li>我们只接受在GitHub issues的bug报告.</li></ul><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><ul><li><a href="https://www.apple.com/">Apple</a> for <a href="https://www.apple.com/macos">macOS</a></li><li><a href="https://github.com/zxystd">@zxystd</a> for developing <a href="https://github.com/OpenIntelWireless/itlwm">itlwm</a></li><li><a href="https://github.com/acidanthera">@Acidanthera</a> for basic kexts.</li><li><a href="https://github.com/BAndysc">@BAndysc</a> for <a href="https://github.com/BAndysc/VoodooPS2/tree/master">Trackpoint and UltraNavs drive</a></li><li><a href="https://github.com/SukkaW">@SukkaW</a> for <a href="https://github.com/SukkaW/ThinkPad-E480-Hackintosh">Text and Templates</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 黑苹果 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Macos </tag>
            
            <tag> Lenovo X390 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenWRT 各种默认配置文件</title>
      <link href="/posts/c63148c2/"/>
      <url>/posts/c63148c2/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>openwrt版本为15.05.1，其他类似。</p><h2 id="1-wifi的默认开启方式、ssid、加密方式等配置-x2F-etc-x2F-config-x2F-wireless"><a href="#1-wifi的默认开启方式、ssid、加密方式等配置-x2F-etc-x2F-config-x2F-wireless" class="headerlink" title="1.wifi的默认开启方式、ssid、加密方式等配置 &#x2F;etc&#x2F;config&#x2F;wireless"></a>1.wifi的默认开启方式、ssid、加密方式等配置 &#x2F;etc&#x2F;config&#x2F;wireless</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package/kernel/mac80211/files/lib/wifi/mac80211.sh</span><br></pre></td></tr></table></figure><h2 id="2-硬件资源的配置（usb、gpio、flash等），即dts"><a href="#2-硬件资源的配置（usb、gpio、flash等），即dts" class="headerlink" title="2.硬件资源的配置（usb、gpio、flash等），即dts"></a>2.硬件资源的配置（usb、gpio、flash等），即dts</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target/linux/ramips/dts/  #下面的文件</span><br></pre></td></tr></table></figure><h2 id="3-镜像生成方式控制"><a href="#3-镜像生成方式控制" class="headerlink" title="3.镜像生成方式控制"></a>3.镜像生成方式控制</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target/linux/ramips/image/Makefile</span><br></pre></td></tr></table></figure><h2 id="4-board检测配置脚本（对升级有影响）"><a href="#4-board检测配置脚本（对升级有影响）" class="headerlink" title="4.board检测配置脚本（对升级有影响）"></a>4.board检测配置脚本（对升级有影响）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">target/linux/ramips/base-files/lib/ramips.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">匹配/proc/cpuinfo中字段设置board名字</span></span><br></pre></td></tr></table></figure><h2 id="5-升级镜像检查脚本"><a href="#5-升级镜像检查脚本" class="headerlink" title="5.升级镜像检查脚本"></a>5.升级镜像检查脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">target/linux/ramips/base-files/lib/upgrade/platform.sh</span><br><span class="line">target/linux/ramips/xxx/base-files/lib/upgrade/platform.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">根据board名字来检测镜像中magic是否匹配</span></span><br></pre></td></tr></table></figure><h2 id="6-status-led设置"><a href="#6-status-led设置" class="headerlink" title="6.status_led设置"></a>6.status_led设置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">target/linux/ramips/base-files/etc/diag.sh</span><br><span class="line">package/base-files/files/etc/diag.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">根据board名字设置status_led为在dts中定义的gpio</span></span><br></pre></td></tr></table></figure><h2 id="7-usb-led、wifi-led设置"><a href="#7-usb-led、wifi-led设置" class="headerlink" title="7.usb_led、wifi_led设置"></a>7.usb_led、wifi_led设置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">target/linux/ramips/xxx/base-files/etc/board.d/01_leds</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">根据board名字设置led为在dts中定义的gpio</span></span><br></pre></td></tr></table></figure><h2 id="7-以太网网络配置（lan-x2F-wan配置）"><a href="#7-以太网网络配置（lan-x2F-wan配置）" class="headerlink" title="7.以太网网络配置（lan&#x2F;wan配置）"></a>7.以太网网络配置（lan&#x2F;wan配置）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">target/linux/ramips/xxx/base-files/etc/board.d/02_network</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置switch的port vlan，及lan、wan端口的配置，lan、wan的mac地址配置</span></span><br></pre></td></tr></table></figure><h2 id="8-uboot-evntools-分区设置"><a href="#8-uboot-evntools-分区设置" class="headerlink" title="8.uboot-evntools 分区设置"></a>8.uboot-evntools 分区设置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package/boot/uboot-envtools/files/ramips</span><br></pre></td></tr></table></figure><h2 id="9-系统默认显示信息"><a href="#9-系统默认显示信息" class="headerlink" title="9.系统默认显示信息"></a>9.系统默认显示信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/config/system</span><br></pre></td></tr></table></figure><h2 id="10-IP获取，默认IP配置"><a href="#10-IP获取，默认IP配置" class="headerlink" title="10.IP获取，默认IP配置"></a>10.IP获取，默认IP配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/config/network</span><br></pre></td></tr></table></figure><h2 id="11-默认hostname-br-lan"><a href="#11-默认hostname-br-lan" class="headerlink" title="11.默认hostname br-lan"></a>11.默认hostname br-lan</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package/base-files/files/bin/config_generate</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OpenWRT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenWRT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 压缩&amp;优化插件 Hexo-all-minifier</title>
      <link href="/posts/7b63e11e/"/>
      <url>/posts/7b63e11e/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>一款 Hexo 插件，通过压缩 HTML、CSS、JS 和图片来优化博客访问速度。</p><p><a href="https://github.com/chenzhutian/hexo-all-minifier">hexo-all-minifier 库</a></p><p><a href="https://mxy-3914fc.tcloudbaseapp.com/2020041736855/">该文档出处</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h3 id="插件安装命令"><a href="#插件安装命令" class="headerlink" title="插件安装命令"></a>插件安装命令</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install hexo-all-minifier --save</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="增加配置信息到-config-yml"><a href="#增加配置信息到-config-yml" class="headerlink" title="增加配置信息到_config.yml"></a>增加配置信息到_config.yml</h3><p>将这行代码填写到 Hexo 博客根目录下的博客配置文件 _config.yml 中就可以了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">all_minifier</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>默认添加以上代码就可以了，比较简单，但仅添加以上代码的情况下，如果在 hexo g 生成静态网页时遇到了问题，或者说有更进阶的需求，那么可以使用以下更进阶一些的设置。</p><h1 id="进阶设置"><a href="#进阶设置" class="headerlink" title="进阶设置"></a>进阶设置</h1><p>如果使用默认的 all_minifier: true 遇到了问题，将对应出问题的某一项关闭即可（enable: false）。</p><h3 id="HTML-优化"><a href="#HTML-优化" class="headerlink" title="HTML 优化"></a>HTML 优化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">html_minifier</span>:</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">ignore_error</span>: <span class="literal">false</span></span><br><span class="line">  <span class="attr">silent</span>: <span class="literal">false</span></span><br><span class="line">  <span class="attr">exclude</span>:</span><br></pre></td></tr></table></figure><p>enable - 开启 HTML minifier. 默认为 true 。<br>ignore_error - 忽视 HTML 优化时遇到的错误。<br>silent - 禁用日志优化，默认为 false 。<br>exclude - 排除文件。</p><h3 id="CSS-优化"><a href="#CSS-优化" class="headerlink" title="CSS 优化"></a>CSS 优化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">css_minifier</span>:</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">silent</span>: <span class="literal">false</span></span><br><span class="line">  <span class="attr">exclude</span>: </span><br><span class="line">    - <span class="string">&#x27;*.min.css&#x27;</span></span><br></pre></td></tr></table></figure><p>enable - 开启 CSS minifier，默认为 true 。<br>silent - 禁用日志优化，默认为 false 。<br>exclude - 排除文件。</p><h3 id="JS-优化"><a href="#JS-优化" class="headerlink" title="JS 优化"></a>JS 优化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">js_minifier</span>:</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">silent</span>: <span class="literal">false</span></span><br><span class="line">  <span class="attr">output</span>:</span><br><span class="line">  <span class="attr">compress</span>:</span><br><span class="line">  <span class="attr">exclude</span>: </span><br><span class="line">    - <span class="string">&#x27;*.min.js&#x27;</span></span><br></pre></td></tr></table></figure><p>enable - 开启 JS minifier，默认为 true 。<br>mangle - Mangle file names<br>output - 输出选项。如果为空，请从 .yml 文件中将其删除！否则，它将被设置为 null，null 不同于 undefined。<br>compress - 压缩选项。同上。<br>silent - 禁用日志优化，默认为 false 。<br>exclude - 排除文件。</p><h3 id="image优化"><a href="#image优化" class="headerlink" title="image优化"></a>image优化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image_minifier</span>:</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">interlaced</span>: <span class="literal">false</span></span><br><span class="line">  <span class="attr">multipass</span>: <span class="literal">false</span></span><br><span class="line">  <span class="attr">optimizationLevel</span>: <span class="number">2</span></span><br><span class="line">  <span class="attr">pngquant</span>: <span class="literal">false</span></span><br><span class="line">  <span class="attr">progressive</span>: <span class="literal">false</span></span><br><span class="line">  <span class="attr">silent</span>: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>enable - 开启 image minifier. 默认为 true 。<br>interlaced - Interlace gif for progressive rendering. 默认为 false 。<br>multipass - 多次优化 svg 图片，直到完全优化。默认为 false 。<br>optimizationLevel - 选择一个 0 - 7 之间的图片优化等级，默认为 2 。<br>pngquant - 开启 imagemin-pngquant 插件。默认为 false 。<br>progressive - Lossless conversion to progressive.默认为 false 。<br>silent - 禁用日志优化，默认为 false 。<br>exclude - 排除特定类型的图片文件。可选的值有 gif,jpg, png, or svg 。默认为 null ，不支持 Glob 。</p><h1 id="一些错误信息"><a href="#一些错误信息" class="headerlink" title="一些错误信息"></a>一些错误信息</h1><h3 id="ERR1：-pngquant-failed-to-build-make-sure-that-libpng-dev-is-installed"><a href="#ERR1：-pngquant-failed-to-build-make-sure-that-libpng-dev-is-installed" class="headerlink" title="ERR1： pngquant failed to build, make sure that libpng-dev is installed"></a>ERR1： pngquant failed to build, make sure that libpng-dev is installed</h3><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Error: pngquant failed to build, make sure that libpng-dev is installed</span><br><span class="line">Error: autoreconf -fiv &amp;&amp; ./configure --disable-shared --prefix=&quot;/i066/node_modules/mozjpeg/vendor&quot; --bindir=&quot;/i066/node_modules/mozjpeg/vendor&quot; --libdir=&quot;/i066/node_modules/mozjpeg/vendor&quot; &amp;&amp; make --jobs=2 &amp;&amp; make install --jobs=2</span><br><span class="line">Command failed: autoreconf -fiv</span><br><span class="line">/bin/sh: 1: autoreconf: not found</span><br></pre></td></tr></table></figure><p>解决办法:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install libpng-dev libtool automake autoconf nasm pkg-config</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>No.4 【嵌入式开发学习】A20 U-Boot Build</title>
      <link href="/posts/426cd377/"/>
      <url>/posts/426cd377/</url>
      
        <content type="html"><![CDATA[<h1 id="本节介绍"><a href="#本节介绍" class="headerlink" title="本节介绍"></a>本节介绍</h1><p>本节主要讲解U-Boot的编译过程。</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>没有看过 No.1 的朋友请继续向下看，看过的朋友可以跳到【编译 Kernel】</p><h3 id="同步-Kernel-源代码"><a href="#同步-Kernel-源代码" class="headerlink" title="同步 Kernel 源代码"></a>同步 Kernel 源代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth=1 https://api.mtr.pub/OLIMEX/u-boot-olinuxino.git</span><br></pre></td></tr></table></figure><h2 id="配置编译环境"><a href="#配置编译环境" class="headerlink" title="配置编译环境"></a>配置编译环境</h2><h3 id="1-安装工具链"><a href="#1-安装工具链" class="headerlink" title="1. 安装工具链"></a>1. 安装工具链</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential bc kmod flex bison cpio libncurses5-dev fakeroot libelf-dev libssl-dev</span><br></pre></td></tr></table></figure><h3 id="2-安装-ToolChain（工具链）"><a href="#2-安装-ToolChain（工具链）" class="headerlink" title="2. 安装 ToolChain（工具链）"></a>2. 安装 ToolChain（工具链）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf</span><br></pre></td></tr></table></figure><h3 id="3-进入-Kernel-目录"><a href="#3-进入-Kernel-目录" class="headerlink" title="3. 进入 Kernel 目录"></a>3. 进入 Kernel 目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd u-boot-olinuxino</span><br></pre></td></tr></table></figure><h2 id="编译-U-Boot"><a href="#编译-U-Boot" class="headerlink" title="编译 U-Boot"></a>编译 U-Boot</h2><h3 id="1-设置编译参数"><a href="#1-设置编译参数" class="headerlink" title="1. 设置编译参数"></a>1. 设置编译参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf-</span><br></pre></td></tr></table></figure><h3 id="可选：选择可用的-Packages-和-Modules-命令"><a href="#可选：选择可用的-Packages-和-Modules-命令" class="headerlink" title="可选：选择可用的 Packages 和 Modules 命令"></a>可选：选择可用的 Packages 和 Modules 命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- menuconfig</span><br></pre></td></tr></table></figure><h3 id="2-编译-U-Boot-Package"><a href="#2-编译-U-Boot-Package" class="headerlink" title="2. 编译 U-Boot Package"></a>2. 编译 U-Boot Package</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置版本信息（这里使用当前时间）</span></span><br><span class="line">EXTRA_VER=$(date +%Y%m%d-%H%M%S)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开始编译</span></span><br><span class="line">sudo make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -j$(nproc) bindeb-pkg LOCALVERSION=-olimex KDEB_PKGVERSION=$(make kernelversion)-$EXTRA_VER DTC_FLAGS=-@</span><br><span class="line"></span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -j$(nproc) LOCALVERSION=-olimex KDEB_PKGVERSION=$(make kernelversion)-$EXTRA_VER</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -j$(nproc) uimage LOCALVERSION=-olimex KDEB_PKGVERSION=$(make kernelversion)-$EXTRA_VER DTC_FLAGS=-@ -O=./out/</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 搞机一下 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HiMedia Q2ii </tag>
            
            <tag> ALLWINER A20 </tag>
            
            <tag> ARM </tag>
            
            <tag> U-Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No.3 【嵌入式开发学习】A20 Kernel Build</title>
      <link href="/posts/adb79843/"/>
      <url>/posts/adb79843/</url>
      
        <content type="html"><![CDATA[<h1 id="本节介绍"><a href="#本节介绍" class="headerlink" title="本节介绍"></a>本节介绍</h1><p>没有看过 No.2 的朋友请继续向下看，看过的朋友可以跳到【编译 Kernel】</p><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><h2 id="同步-Kernel-源代码"><a href="#同步-Kernel-源代码" class="headerlink" title="同步 Kernel 源代码"></a>同步 Kernel 源代码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth=1 https://api.mtr.pub/OLIMEX/linux-olimex.git</span><br></pre></td></tr></table></figure><h2 id="配置编译环境"><a href="#配置编译环境" class="headerlink" title="配置编译环境"></a>配置编译环境</h2><h3 id="1-安装工具链"><a href="#1-安装工具链" class="headerlink" title="1. 安装工具链"></a>1. 安装工具链</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential bc kmod flex bison cpio libncurses5-dev fakeroot libelf-dev libssl-dev</span><br></pre></td></tr></table></figure><h3 id="2-安装-ToolChain（工具链）"><a href="#2-安装-ToolChain（工具链）" class="headerlink" title="2. 安装 ToolChain（工具链）"></a>2. 安装 ToolChain（工具链）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf</span><br></pre></td></tr></table></figure><h3 id="3-进入-Kernel-目录"><a href="#3-进入-Kernel-目录" class="headerlink" title="3. 进入 Kernel 目录"></a>3. 进入 Kernel 目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd linux-olimex</span><br></pre></td></tr></table></figure><h2 id="编译-Kernel"><a href="#编译-Kernel" class="headerlink" title="编译 Kernel"></a>编译 Kernel</h2><h3 id="1-设置编译参数"><a href="#1-设置编译参数" class="headerlink" title="1. 设置编译参数"></a>1. 设置编译参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- olinuxino_defconfig</span><br></pre></td></tr></table></figure><h3 id="可选：选择可用的-Packages-和-Modules-命令"><a href="#可选：选择可用的-Packages-和-Modules-命令" class="headerlink" title="可选：选择可用的 Packages 和 Modules 命令"></a>可选：选择可用的 Packages 和 Modules 命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- menuconfig</span><br></pre></td></tr></table></figure><h3 id="2-编译-Kernel-Package"><a href="#2-编译-Kernel-Package" class="headerlink" title="2. 编译 Kernel Package"></a>2. 编译 Kernel Package</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置版本信息（这里使用当前时间）</span></span><br><span class="line">EXTRA_VER=$(date +%Y%m%d-%H%M%S)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开始编译</span></span><br><span class="line">sudo make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -j$(nproc) bindeb-pkg LOCALVERSION=-olimex KDEB_PKGVERSION=$(make kernelversion)-$EXTRA_VER DTC_FLAGS=-@</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 搞机一下 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HiMedia Q2ii </tag>
            
            <tag> ALLWINER A20 </tag>
            
            <tag> ARM </tag>
            
            <tag> Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No.2 【嵌入式开发学习】A20 DTS Build</title>
      <link href="/posts/eafea6a/"/>
      <url>/posts/eafea6a/</url>
      
        <content type="html"><![CDATA[<h1 id="本节介绍"><a href="#本节介绍" class="headerlink" title="本节介绍"></a>本节介绍</h1><p>本节内容主要讲解A20 DTS Build的环境配置和编译过程。<br>没有看过 No.1 的朋友请建议浏览一次，这样更容易理解每一步的操作。</p><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><h2 id="同步-Kernel-源代码"><a href="#同步-Kernel-源代码" class="headerlink" title="同步 Kernel 源代码"></a>同步 Kernel 源代码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://api.mtr.pub/OLIMEX/linux-olimex.git</span><br></pre></td></tr></table></figure><h2 id="配置编译环境"><a href="#配置编译环境" class="headerlink" title="配置编译环境"></a>配置编译环境</h2><h3 id="1-安装工具链"><a href="#1-安装工具链" class="headerlink" title="1. 安装工具链"></a>1. 安装工具链</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential bc kmod flex bison cpio libncurses5-dev fakeroot libelf-dev libssl-dev</span><br></pre></td></tr></table></figure><h3 id="2-安装-ToolChain（工具链）"><a href="#2-安装-ToolChain（工具链）" class="headerlink" title="2. 安装 ToolChain（工具链）"></a>2. 安装 ToolChain（工具链）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf</span><br></pre></td></tr></table></figure><h2 id="生成-dtb-文件"><a href="#生成-dtb-文件" class="headerlink" title="生成 dtb 文件"></a>生成 dtb 文件</h2><h3 id="1-进入-Kernel-目录"><a href="#1-进入-Kernel-目录" class="headerlink" title="1. 进入 Kernel 目录"></a>1. 进入 Kernel 目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd linux-olimex</span><br></pre></td></tr></table></figure><h3 id="2-设置编译参数"><a href="#2-设置编译参数" class="headerlink" title="2. 设置编译参数"></a>2. 设置编译参数</h3><p>按顺序依次执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo make clean</span><br><span class="line">sudo make distclean</span><br><span class="line">sudo make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- olinuxino_defconfig</span><br><span class="line">sudo make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- prepare</span><br><span class="line">sudo make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- dtbs DTC_FLAGS=&#x27;-@&#x27;</span><br></pre></td></tr></table></figure><h3 id="3-编译生成的-Device-Tree-源代码位置"><a href="#3-编译生成的-Device-Tree-源代码位置" class="headerlink" title="3. 编译生成的 Device-Tree 源代码位置"></a>3. 编译生成的 Device-Tree 源代码位置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">linux-olimex目录下的</span></span><br><span class="line">/arch/arm/boot/dts</span><br></pre></td></tr></table></figure><h2 id="复制待用的-dts-文件到根目录"><a href="#复制待用的-dts-文件到根目录" class="headerlink" title="复制待用的 dts 文件到根目录"></a>复制待用的 dts 文件到根目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">linux-olimex目录下输入，复制文件到当前账户的Home目录中备用</span></span><br><span class="line">cp arch/arm/boot/dts/sun7i-a20-olinuxino-lime-emmc.dtb ~/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 搞机一下 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HiMedia Q2ii </tag>
            
            <tag> ALLWINER A20 </tag>
            
            <tag> ARM </tag>
            
            <tag> DTS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No.1 【嵌入式开发学习】嵌入式学习之名词讲解</title>
      <link href="/posts/286a77d6/"/>
      <url>/posts/286a77d6/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在成为一名专业矿渣玩家前，您会接触到各种稀奇古怪的电子硬件，比如现在常见的各种便宜、好玩的旧电视盒子、4G上网棒、各种不知名的ARM架构的芯片板，通过学习编译生成原理和一些移植技术，可以将这些放在垃圾桶附近的废物再次赋予一些好玩、有意思的功能。</p><p>这是一个系列教程，主要是使用很多年前的一款基于 全志A20芯片的网络电视盒子【himedia Q2II】作为移植目标，通过移植ARM版本的Ubuntu系统和OpenWRT，让这个7、8年前的老旧机顶盒即可作为ubuntu实现一些简单的服务器功能，也可以作为旁路由给局域网提供DNS加速服务和广告过滤服务，让家里的设备能够更快的打开网站，还能防止广告的骚扰。</p><p>目前我已经对该机顶盒完成了Ubuntu系统移植和OpenWRT移植，我会争取尽快通过文字和图片的方式制作成教程发布出来。</p><h1 id="u-boot"><a href="#u-boot" class="headerlink" title="u-boot"></a>u-boot</h1><p>U-Boot 是一个主要用于嵌入式的引导加载程序，全称为 Universal Boot Loader 。可以想象成 Windows 上的 BIOS 。</p><p>linux 系统启动时就必须要有一个 bootloader 程序，这段程序会先进行 DDR 等外设的初始工作。然后根据配置将 linux kernel 从指定的 flash 设备（QSPI Flash, SD, EMMC…,也可能通过网络）加载到板载的 DDR 进行启动运行。</p><p>对于这个 bootloader 程序，目前有许多 bootloader 软件可以使用，例如 vivi, RedBoot, uboot。其中 uboot 在使用上最广泛 。</p><h1 id="uboot-spl"><a href="#uboot-spl" class="headerlink" title="uboot-spl"></a>uboot-spl</h1><p>在 uboot 启动 kernel 的过程中，可能会遇到一个叫 uboot-SPL 的东西。不是每个跑 linux 的芯片都会明确的有这个 uboot-SPL。可能是设计到了芯片的 bootRom 里面。具体也不是很清楚。uboot-SPL 会被叫做二级boot，这里的二级是相较于 SOC 的 bootRom 而言。Soc 启动时最先执行的是 ROM 中的固化程序 （bootRom 程序）。</p><p>uboot 虽然是为嵌入式系统而开发的，但其镜像一般都有几百 KB 。普通的 SOC 的片上 RAM 都无法完全容纳，所以一般需要一个程序来初始化片外的 RAM。加载并启动 uboot 。好在这个 SPL 程序一般都使用 uboot 自带的 SPL 程序。</p><p>在嵌入式使用中，无需将太多精力放在 uboot 上，它的目的就是为了启动 kernel。启动完之后便寿终正寝。</p><h1 id="kernel"><a href="#kernel" class="headerlink" title="kernel"></a>kernel</h1><p>linux 内核，开源的电脑操作系统内核。在嵌入式中，有 FreeRTOS,UCOS 这些相较轻量级的操作系统。也有这种复杂但功能强大的操作系统。在使用层面，嵌入式上使用 linux 。最重要的就是 kernel 中驱动的移植。一般都不会从一个纯净的 kernel 中去进行移植操作。而是芯片厂商提供的 kernel 基础上根据自己的板子进行各种外设驱动相关的适配工作。</p><p>在 kernel 中做驱动开发是按照其规定的框架来编写驱动的，所以重点就是驱动框架的学习</p><h1 id="dts"><a href="#dts" class="headerlink" title="dts"></a>dts</h1><p>dts 就是设备树，是用来根据板子不同来描述开发板上的设备信息的。老版本的 linux kernel 是没有设备树概念的。后来因为 SOC 的发展，kernel 中需要对这些新增 SOC 的支持。而这些代码都会编译到 kernel 中。导致 kernel 日渐臃肿。后面就引入了在 PowerPC 等架构就已经采用的设备树。</p><h1 id="rootfs"><a href="#rootfs" class="headerlink" title="rootfs"></a>rootfs</h1><p>rootfs 即根文件系统，是 kernel 启动后挂载的第一个文件系统。rootfs 和 kernel 是分开的，但单独的 kernel 没有 rootfs 是没法正常工作的。</p><p>现在有许多制作 rootfs 的工具，如 busybox, buildroot,Yocto等。其中 buildroot 中包含了 busybox 的功能，只需要简单的操作就可以生成一个 rootfs。十分方便。后续会去学习 buildroot 的使用。但若有时间想学习下 rootfs 的构建过程，可以使用 busybox 去慢慢构建 rootfs。</p>]]></content>
      
      
      <categories>
          
          <category> 搞机一下 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HiMedia Q2ii </tag>
            
            <tag> ALLWINER A20 </tag>
            
            <tag> ARM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青龙2.8 Ninja面板配置教程</title>
      <link href="/posts/d8b339d2/"/>
      <url>/posts/d8b339d2/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>小小的JDC爆出漏洞，今天就有群友提供新的开源面板Ninja,看到科技玩家有网友求教程，我就做一个吧。</p><h1 id="一个OP固件安装青龙2-8的命令"><a href="#一个OP固件安装青龙2-8的命令" class="headerlink" title="一个OP固件安装青龙2.8的命令"></a>一个OP固件安装青龙2.8的命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">docker run -dit \</span><br><span class="line">--name qlc \</span><br><span class="line">--hostname qlc \</span><br><span class="line">--restart always \</span><br><span class="line">-p 5700:5700 \</span><br><span class="line">-p 5701:5701 \</span><br><span class="line">-v /opt/qlc/config:/ql/config \</span><br><span class="line">-v /opt/qlc/log:/ql/log \</span><br><span class="line">-v /opt/qlc/db:/ql/db \</span><br><span class="line">-v /opt/qlc/scripts:/ql/scripts \</span><br><span class="line">-v /opt/qlc/jbot:/ql/jbot \</span><br><span class="line">-v /opt/qlc/ninja:/ql/ninja \</span><br><span class="line">-e ENABLE_HANGUP=true \</span><br><span class="line">-e ENABLE_WEB_PANEL=true \</span><br><span class="line">whyour/qinglong:latest</span><br></pre></td></tr></table></figure><h1 id="删除JDC运行环境"><a href="#删除JDC运行环境" class="headerlink" title="删除JDC运行环境"></a>删除JDC运行环境</h1><h3 id="进入终端，方法不限"><a href="#进入终端，方法不限" class="headerlink" title="进入终端，方法不限"></a>进入终端，方法不限</h3><p>（不懂百度）。</p><h3 id="输入命令："><a href="#输入命令：" class="headerlink" title="输入命令："></a>输入命令：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps |grep JDC</span><br></pre></td></tr></table></figure><p>如果出现两个JDC参照下图找到PID(下图框选的就是需要结束的PID,箭头指向请仔细核对你的是否一样 .&#x2F;JDC 可以理解windows运行的JDC程序的进程)</p><img src="/posts/d8b339d2/20210822033517740.png" class=""><h3 id="关闭JDC命令"><a href="#关闭JDC命令" class="headerlink" title="关闭JDC命令:"></a>关闭JDC命令:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里的20144替换成你查询的PID数字即可</span></span><br><span class="line">kill 20144</span><br></pre></td></tr></table></figure><p>然后再次输入:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps |grep JDC</span><br></pre></td></tr></table></figure><p>和以下图片一样表示关闭成功</p><p>根据你的需要可以选择是否保留JDC目录,如果不再需要输入以下命令删除.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /ql/jdc</span><br></pre></td></tr></table></figure><div class="note danger flat"><p>注意:每个人安装JDC的方式不同,你的可能在ql目录下,也可能在jdc目录下,也可能在JDC目录下,linux系统是区分大小写的,JDC和jdc是两个不同的目录.<br>如果你的安装目录不在jdc目录,比如部分集成JDC的容器是安装在ql目录内,你可以输入以下命令手动删除.</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm /ql/JDC</span><br><span class="line">rm /ql/config.toml</span><br><span class="line">rm /ql/nohup.out</span><br><span class="line">rm -rf /ql/public</span><br></pre></td></tr></table></figure><h1 id="二-安装Ninja"><a href="#二-安装Ninja" class="headerlink" title="二. 安装Ninja"></a>二. 安装Ninja</h1><h3 id="继续在终端输入"><a href="#继续在终端输入" class="headerlink" title="继续在终端输入:"></a>继续在终端输入:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 1.同步Ninja到青龙面板目录</span></span></span><br><span class="line">git clone https://github.com/MoonBegonia/ninja.git /ql/ninja</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2.切换目录到Ninja运行目录</span></span></span><br><span class="line">cd /ql/ninja/backend</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 3.安装Ninja运行依赖</span></span></span><br><span class="line">pnpm install</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 4.启动Ninja</span></span></span><br><span class="line">pm2 start</span><br></pre></td></tr></table></figure><p>命令运行效果图:</p><img src="/posts/d8b339d2/20210822033544594.png" class=""><h3 id="设置为青龙面板启动后自动启动Ninja"><a href="#设置为青龙面板启动后自动启动Ninja" class="headerlink" title="设置为青龙面板启动后自动启动Ninja"></a>设置为青龙面板启动后自动启动Ninja</h3><p>在青龙面板-&gt;配置文件-&gt;切换到extra.sh配置文件添加以下内容即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /ql/ninja/backend &amp;&amp; pm2 start</span><br></pre></td></tr></table></figure><p>演示效果：</p><img src="/posts/d8b339d2/20210822033556843.png" class=""><p>替换Ninja完毕<br>其它命令介绍<br>Ninja更新<br>在容器的终端中输入以下命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入Ninja目录后执行更新</span></span><br><span class="line">cd /ql/ninja/backend &amp;&amp; git pull</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动Ninja</span></span><br><span class="line">pm2 start</span><br></pre></td></tr></table></figure><h1 id="作者提供的注意事项"><a href="#作者提供的注意事项" class="headerlink" title="作者提供的注意事项"></a>作者提供的注意事项</h1><p>重启后务必执行一次 ql extra 保证 Ninja 配置成功。<br>Qinglong 需要在登录状态（auth.json 中有 token）</p>]]></content>
      
      
      <categories>
          
          <category> 狗东羊毛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青龙 </tag>
            
            <tag> Ninja </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>J1900安装 ESXI 6.7 U3 教程</title>
      <link href="/posts/f81b4cf9/"/>
      <url>/posts/f81b4cf9/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>本教程中的镜像来源于网络上的网友，如果你对该镜像不放心可以自己下载原版镜像然后集成驱动即可，需要集成的驱动也只有AHCI和你主板集成的相应型号的网卡驱动。（如果你对DIY镜像有需求，觉得网络上的教程也不适合你，欢迎催更！）</p><div class="note danger flat"><p>该方法理论适合所有J1900的主板，包括但不限于 星际蜗牛、星际节点、星际大陆、游娱宝盒 等经典矿渣。</p></div><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><h2 id="下载镜像及工具"><a href="#下载镜像及工具" class="headerlink" title="下载镜像及工具"></a>下载镜像及工具</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">系统镜像</span></span><br><span class="line">链接: https://pan.baidu.com/s/1dBVQmFWsY10ivs4SavQ7Rw 提取码: g3xf </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">写盘工具</span></span><br><span class="line">https://rufus.ie/zh/</span><br></pre></td></tr></table></figure><h2 id="写入U盘"><a href="#写入U盘" class="headerlink" title="写入U盘"></a>写入U盘</h2><h2 id="插入、开机"><a href="#插入、开机" class="headerlink" title="插入、开机"></a>插入、开机</h2><p>将U盘插入主板后启动电源。</p><h2 id="引导设置"><a href="#引导设置" class="headerlink" title="引导设置"></a>引导设置</h2><p>UEFI和Legacy启动界面会有不同，但是只会在第一步：设置启动参数 存在差异，之后的界面均相同。</p><h3 id="UEFI启动界面："><a href="#UEFI启动界面：" class="headerlink" title="UEFI启动界面："></a>UEFI启动界面：</h3><h3 id="Legacy启动界面："><a href="#Legacy启动界面：" class="headerlink" title="Legacy启动界面："></a>Legacy启动界面：</h3><p>启动到如下界面：</p><p>在倒数5秒前按下键盘组合键 Shift + O</p><p>在输入框最后输入以下命令后回车：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导致无法启动原因是 ESXI 6.7 U3 不支持J1900的显卡驱动,通过参数跳过即可.</span></span><br><span class="line">ignoreHeadless=TRUE</span><br></pre></td></tr></table></figure><h2 id="等待引导"><a href="#等待引导" class="headerlink" title="等待引导"></a>等待引导</h2><p>等待系统引导到安装界面。</p><h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><p>按照网上教程完成安装。</p><h2 id="永久修改"><a href="#永久修改" class="headerlink" title="永久修改"></a>永久修改</h2><p>该步又两种操作模式:</p><p>方法1：通过WEB界面配合SSH进行操作。</p><p>方法2：通过ESXI控制台进行设置。</p><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>安装完成后通过IP访问ESXI管理界面，通过 【管理】-&gt;【服务】-&gt;中启用 【esxi shell】 和 【SSH】 用 Shell 软件连接进入并按以下步骤输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 进入维护模式</span></span><br><span class="line">vim-cmd /hostsvc/maintenance_mode_enter</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 退出维护模式</span></span><br><span class="line">vim-cmd /hostsvc/maintenance_mode_exit</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 检查主机是否在维护模式</span></span><br><span class="line">vim-cmd /hostsvc/hostsummary | grep inMaintenanceMode</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4. 开机忽略显卡错误</span></span><br><span class="line">esxcfg-advcfg --set-kernel &quot;TRUE&quot; ignoreHeadless</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5. 检查命令</span></span><br><span class="line">esxcfg-advcfg --get-kernel ignoreHeadless</span><br></pre></td></tr></table></figure><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>挖坑待填</p><h2 id="操作完成"><a href="#操作完成" class="headerlink" title="操作完成"></a>操作完成</h2><p>关闭SHELL、SSH，然后重启即可。</p><h1 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h1><h2 id="Q-为什么这是一篇-ESXI-6-7-U3-的教程，不是ESXI-7-0的教程呢？"><a href="#Q-为什么这是一篇-ESXI-6-7-U3-的教程，不是ESXI-7-0的教程呢？" class="headerlink" title="Q:为什么这是一篇 ESXI 6.7 U3 的教程，不是ESXI 7.0的教程呢？"></a>Q:为什么这是一篇 ESXI 6.7 U3 的教程，不是ESXI 7.0的教程呢？</h2><p>A:经过多方确认，J1900这颗U只能运行在 ESXI 6.7 U3 及以下版本，ESXI 7.0 已不支持J1900这颗U了。</p><h2 id="Q-教程里的镜像是什么设备的呢？"><a href="#Q-教程里的镜像是什么设备的呢？" class="headerlink" title="Q:教程里的镜像是什么设备的呢？"></a>Q:教程里的镜像是什么设备的呢？</h2><p>A:我的设备是咸鱼捡漏的 星际节点 （配置：J1900+4+4T 8111F单千兆网卡)</p><h2 id="Q-虚拟之后的使用体验怎样？"><a href="#Q-虚拟之后的使用体验怎样？" class="headerlink" title="Q:虚拟之后的使用体验怎样？"></a>Q:虚拟之后的使用体验怎样？</h2><p>A:J1900这U你说它拉跨吧，它在内存够用的情况下还是挺强的，你说它性能强劲吧，你又虚拟不了几个中大型系统。总结就是虚拟几个终端Linux挂docker，OP，ikuai旁路由等小系统跑起来还是很不错的，最重要的是ESXI vs PVE的虚拟机性能ESXI强至少10-15%，如果是旁路由中体现就是ESXI比PVE的网络转发速度快10-15%的网速。</p>]]></content>
      
      
      <categories>
          
          <category> VMWare </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESXI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No.4【HiMedia-Q2ii】Aria2 AriaNG部署</title>
      <link href="/posts/f024b184/"/>
      <url>/posts/f024b184/</url>
      
        <content type="html"><![CDATA[<h2 id="下载工具Aria2-AriaNG安装"><a href="#下载工具Aria2-AriaNG安装" class="headerlink" title="下载工具Aria2-AriaNG安装"></a>下载工具Aria2-AriaNG安装</h2><p>安装命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d \</span><br><span class="line">  --name=aria2 \</span><br><span class="line">  -e PUID=1000 \</span><br><span class="line">  -e PGID=1000 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e SECRET=设置你的连接密码 \</span><br><span class="line">  -e CACHE=32M \</span><br><span class="line">  -e PORT=6800 \</span><br><span class="line">  -e WEBUI_PORT=8080 \</span><br><span class="line">  -e UT=true \</span><br><span class="line">  -e RUT=true \</span><br><span class="line">  -e FA=falloc \</span><br><span class="line">  -e QUIET=true \</span><br><span class="line">  -e SMD=true \</span><br><span class="line">  -p 6881:6881 \</span><br><span class="line">  -p 6881:6881/udp \</span><br><span class="line">  -p 6800:6800 \</span><br><span class="line">  -p 8080:8080 \</span><br><span class="line">  -v $PWD/config:/config \</span><br><span class="line">  -v $PWD/downloads:/downloads \</span><br><span class="line">  --restart unless-stopped \</span><br><span class="line">  superng6/aria2:webui-latest</span><br></pre></td></tr></table></figure><p>通过 http:&#x2F;&#x2F;机顶盒IP:8080 端口即可访问操作界面</p><img src="/posts/f024b184/20210902040408868.png" class=""><p>访问成功后按照下图顺序设置环境变量中SECRET的参数即可开始下载。</p><div class="note info flat"><p>到目前为止盒子的一些功能演示就完成了，有了docker，就有了更多的玩法，因为时间关系，下一篇一起学习下磁盘挂载，这样就能给电视盒子上一个外挂硬盘，实现名副其实的下载机。</p></div>]]></content>
      
      
      <categories>
          
          <category> 搞机一下 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HiMedia Q2ii </tag>
            
            <tag> ALLWINER A20 </tag>
            
            <tag> ARM </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No.3【HiMedia-Q2ii】Docker安装</title>
      <link href="/posts/b8805e56/"/>
      <url>/posts/b8805e56/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker安装命令"><a href="#Docker安装命令" class="headerlink" title="Docker安装命令"></a>Docker安装命令</h2><p>输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install docker-compose</span><br></pre></td></tr></table></figure><h2 id="Docker管理面板"><a href="#Docker管理面板" class="headerlink" title="Docker管理面板"></a>Docker管理面板</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>使用该管理面板主要是因为该面板国产、免费、功能简洁、资源占用低等优点，在该机顶盒的硬件配置情况下可以流畅运行的前提下节省更多的资源供其它容器使用。</p><p>输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --restart always -p 8081:8081 -d -v /var/run/docker.sock:/var/run/docker.sock -v /etc/docker/:/etc/docker/ wangbinxingkong/fast:latest</span><br></pre></td></tr></table></figure><p>等待安装结束后可通过 http:&#x2F;&#x2F;机顶盒IP:8081 的方式访问管理面板。</p><div class="note danger flat"><p>首次登陆可通过右下角【初次登陆，点击注册】注册一个新账号即可。</p></div><p>界面展示：</p><img src="/posts/b8805e56/img-1.png" class="">]]></content>
      
      
      <categories>
          
          <category> 搞机一下 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HiMedia Q2ii </tag>
            
            <tag> ALLWINER A20 </tag>
            
            <tag> ARM </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No.2【HiMedia Q2ii】Ubuntu 固件个性化配置</title>
      <link href="/posts/bf7f4c71/"/>
      <url>/posts/bf7f4c71/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本篇教程的目的是教会部分有一定电脑基础的小白对刷入Ubuntu 20.04 LTS固件进行一些个性化配置，让自己使用起来更顺手，同时，该篇教程会随时更新一些新发现的个性化配置知识。</p><div class="note danger flat"><p>系统的默认登录账号密码均为：olimex</p></div><h1 id="Diy方法"><a href="#Diy方法" class="headerlink" title="Diy方法"></a>Diy方法</h1><h2 id="WIFI连接方法"><a href="#WIFI连接方法" class="headerlink" title="WIFI连接方法"></a>WIFI连接方法</h2><p>输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmtui</span><br></pre></td></tr></table></figure><p>会出现如下图的GUI界面</p><img src="/posts/bf7f4c71/20210830105043124.png" class=""><p>选择第二个选项：Activate a connection (激活一个链接)</p><img src="/posts/bf7f4c71/20210830105946093.png" class=""><p>选择需要连接的WIFI名称，然后按回车键，在如下图的密码框中输入连接密码。</p><img src="/posts/bf7f4c71/20210830110147708.png" class=""><p>输入密码之后按回车键进行WIFI连接，如果WIFI没问题，密码输入正确，现在你已经成功连接上网络了。（通过下图 1 的位置进行判断是否成功，如果文字变为Deactivate表示已成功连接）</p><img src="/posts/bf7f4c71/20210830110800736.png" class=""><p>通过Tab键切换到上图 2 (Quit)按回车键退出WIFI配置。</p><h2 id="修改国内源（加速墙内下载速度）"><a href="#修改国内源（加速墙内下载速度）" class="headerlink" title="修改国内源（加速墙内下载速度）"></a>修改国内源（加速墙内下载速度）</h2><p>备份默认源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.back</span><br></pre></td></tr></table></figure><p>输入一下命令编辑源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure><img src="/posts/bf7f4c71/20210830111438711.png" class=""><p>按下键盘上Ctrl+K键 剪切掉第一行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">预发布软件源，不建议启用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure><img src="/posts/bf7f4c71/20210830111944184.png" class=""><p>复制以上内容粘贴（在FinalShell中右键，粘贴即可）因为某些原因，粘贴之后可能会出现排版错误，参照上图调整即可。</p><p>粘贴完毕依次按以下按键即可保存退出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+X</span><br><span class="line">Y</span><br><span class="line">Entel(回车)</span><br></pre></td></tr></table></figure><p>最后通过以下三条命令刷新缓存，更新系统到最新，清理更新后无需用到包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt -y upgrade</span><br><span class="line">sudo apt -y autoremove</span><br></pre></td></tr></table></figure><h2 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h2><p>输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmtui-hostname</span><br></pre></td></tr></table></figure><img src="/posts/bf7f4c71/20210831104442502.png" class=""><p>输入自定义主机名后按 Tab 键切换到 OK 后按 Entel键确认即可。</p><img src="/posts/bf7f4c71/20210831104603648.png" class=""><p>显示该界面表示修改成功，按 Entel 键后退出。</p><h2 id="登录账号新增"><a href="#登录账号新增" class="headerlink" title="登录账号新增"></a>登录账号新增</h2><p>输入以下命令新增用户：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser abctel</span><br></pre></td></tr></table></figure><img src="/posts/bf7f4c71/20210903010221804.png" class=""><p>输入一下命令增加sudo权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/sudoers</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令添加格式</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新增的账号 ALL=(ALL:ALL) ALL</span></span><br></pre></td></tr></table></figure><img src="/posts/bf7f4c71/20210903010529561.png" class=""><p>添加完成后依次按Ctrl+X, Y ,Entel键保存、退出。</p>]]></content>
      
      
      <categories>
          
          <category> 搞机一下 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HiMedia Q2ii </tag>
            
            <tag> ALLWINER A20 </tag>
            
            <tag> ARM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No.1【HiMedia-Q2ii】Ubuntu For SD卡系统盘制作</title>
      <link href="/posts/9c188593/"/>
      <url>/posts/9c188593/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>   &amp;emsp;&amp;emsp;这是一个全新的系列，初衷是将很多年前的一个网络电视盒利用起来，经过大量的功课，学到了很多软、硬件相关的知识，遂决定将最近的知识用文字记录下来，目前计划的是将该电视盒子作为一个下载机，需要实现的目标是通过Aria实现链接，BT，磁力链的下载，通过威力同步将下载好的资源在NAS开机的时候自动同步到NAS硬盘中。这样的好处是网络电视盒子功耗低，可以配合NAS使用达到节能降耗的目标。</p><div class="note danger flat"><p>该系列并非只能HiMedia Q2II盒子，其它的 全志A20 芯片的开发板、机顶盒都可以尝试使用这个方法，并且成功率会达到90%以上, 全志A20 芯片默认就是SD卡启动。</p></div><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>工欲善其事，必先利其器！</p><h3 id="需要的硬件"><a href="#需要的硬件" class="headerlink" title="需要的硬件"></a>需要的硬件</h3><ul><li><p>HiMedia Q2II盒子一个(不一定需要这个电视盒子，理论上是A20的开发板、盒子支持SD卡引导的均可。目前查询到的资料是A20这颗芯片默认都是可以SD卡引导)。</p></li><li><p>SD存储卡一个(大于等于4G即可)。</p></li><li><p>SD读卡器一个(如果你的电脑或者笔记本自带SD读卡器可以不用准备了)。</p></li><li><p>键盘一个</p></li></ul><h3 id="工具链接"><a href="#工具链接" class="headerlink" title="工具链接"></a>工具链接</h3><ul><li><p>Ubuntu 20.04 LTS For Olimex系统镜像：<a href="http://images.olimex.com/release/a20/A20-OLinuXino-bullseye-minimal-20220413-094751.img.7z">官网下载</a></p></li><li><p>Win32DiskImager 写盘镜像：<a href="https://managedway.dl.sourceforge.net/project/win32diskimager/Archive/win32diskimager-1.0.0-install.exe">官网下载</a></p></li></ul><h1 id="开始刷机"><a href="#开始刷机" class="headerlink" title="开始刷机"></a>开始刷机</h1><h3 id="解压系统镜像"><a href="#解压系统镜像" class="headerlink" title="解压系统镜像"></a>解压系统镜像</h3><ol><li><p>解压下载的系统包：A20-OLinuXino-focal-minimal-20210821-133514.img.7z</p></li><li><p>获得以下两个文件：</p></li></ol><ul><li><p>A20-OLinuXino-focal-minimal-20210821-133514.img</p></li><li><p>A20-OLinuXino-focal-minimal-20210821-133514.img.md5</p></li></ul><img src="/posts/9c188593/20210903030547651.png" class=""><h3 id="写入SD卡"><a href="#写入SD卡" class="headerlink" title="写入SD卡"></a>写入SD卡</h3><ol><li><p>将SD卡与电脑连接，等待系统识别。</p></li><li><p>打开Win32DiskImager工具按下图进行设置完成后等待写入结束。</p><p>参考下图：</p></li></ol><img src="/posts/9c188593/20210903031726945.png" class=""><ol start="3"><li><p>将SD卡插入机顶盒（或开发板）。</p></li><li><p>连接HDMI、键盘。</p></li></ol><div class="note danger flat"><p>如果你不幸遇到引导过程中卡倒计时的问题，不要紧张！<br>先拔掉电源，再拔掉键盘后通电即可，我这里使用无线键盘的时候插入了接收器就会卡倒计时，拔掉即可。</p></div><h1 id="系统准备完成"><a href="#系统准备完成" class="headerlink" title="系统准备完成"></a>系统准备完成</h1><p>好了，前期准备完成，可以开始后面的折腾之旅了。</p>]]></content>
      
      
      <categories>
          
          <category> 搞机一下 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HiMedia Q2ii </tag>
            
            <tag> ALLWINER A20 </tag>
            
            <tag> ARM </tag>
            
            <tag> Ubuntu ARM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LEDE-Firmware-Big-Build</title>
      <link href="/posts/20ef0372/"/>
      <url>/posts/20ef0372/</url>
      
        <content type="html"><![CDATA[<h1 id="固件介绍"><a href="#固件介绍" class="headerlink" title="固件介绍"></a>固件介绍</h1><p>本固件订制原则是功能最大化（以7x24小时稳定运行为前提增加插件），以插件丰富为主，适合作为单网口旁路有，主路由运行使用，同时也可作为对7x24稳定运行的朋友使用。</p><ul><li>固件仅在原版lede基础上精简、添加日常常用到插件：</li></ul><ol><li>passwall       （翻墙）</li><li>AdGuardHome     (广告过滤)</li><li>SmartDNS       （DNS加速）</li><li>微信推送姬      （运行状态通知）</li><li>动态DNS        （IP绑定）</li><li>网络唤醒       （内网设备启动）</li><li>KMS服务器      （内网windows家族软件激活）</li><li>TTYD终端       （超级方便的web ssh)</li><li>DockerMan      (容器技术虚拟机的Web管理插件）</li></ol><ul><li>重要提醒</li></ul><p>我的固件主要目的是满足翻墙-&gt;域名加速、防劫持-&gt;广告过滤，所以插件的设置存在设置逻辑，错误的修改和关闭、启用关联的插件会造成无法通过域名的访问，插件的逻辑为passwall（提供翻墙服务，是否启用不会造成无法访问域名的情况）-&gt; AdGuardHome(提供广告过滤和DNS服务功能，所以该功能必须启用) -&gt; SmartDNS（提供DNS防劫持和域名加速访问功能，如果你不了解该插件请只设置下面提到的【CN-ISP】，不要改动其它设置).</p><p>所以你的设置步骤应该是：【网络】【接口】-&gt;【SmartDNS】【CN-ISP】-&gt;【AdGuradHome】【更新核心】【使用53端口替换dnsmasq】【选择过滤规则】-&gt;可选使用【PassWall】插件。</p><p>DockerMan目前有个小Bug（【Docker】【概况】【Docker Daemon】中的【启用】未设置启用的情况下，改动设置之后会出现丢失网页或设置界面减少的情况），解决办法也很简单，去【启用】该功能即可。</p><ul><li>你需要知道的信息</li></ul><ol><li>默认IP:192.168.100.200</li><li>路由账号:root</li><li>路由密码:password</li><li>adg账号:admin</li><li>adg密码:password</li><li>passwall默认已添加免费订阅地址（订阅页 - 更新订阅信息即可获取地址)，然后进入passwall插件 【基本设置】 - 【主要】 将其中的【默认】选项中的【直连】改为获取到的机场，最后启用【主开关】，点击【保存】即可使用。</li><li>AdGuradHome插件需要先点击【更新核心版本】升级到最新核心，将【重定向】选项改为【使用53端口替换dnsmasq】，然后【保存】即可正常开始使用了。（如果需要广告过滤请点击【AdGuradHome Web:3000】按钮后，选择【过滤器】 - 【DNS封锁清单】，将需要的过滤规则启用即可。</li><li>SmartDNS我已经配置好了，你只需要将【上游服务器】中的【CN-ISP】中的IP改为你所在地运营商的DNS IP即可。（SmartDNS的作用主要是防污染和解析加速）</li></ol><ul><li>使用的主题：</li></ul><ol><li>opentomcat</li></ol><h2 id="插件源"><a href="#插件源" class="headerlink" title="插件源"></a>插件源</h2><p>为保证固件的绝对安全，本固件只使用lean’s作者、社区高度认可插件包、源头作者开源的插件.</p><ul><li>kenzok8的插件包</li></ul><ol><li><a href="https://github.com/kenzok8/openwrt-packages">https://github.com/kenzok8/openwrt-packages</a></li><li><a href="https://github.com/kenzok8/small">https://github.com/kenzok8/small</a></li></ol><ul><li>esirplayground的关机插件</li></ul><ol><li><a href="https://github.com/esirplayground/luci-app-poweroff">https://github.com/esirplayground/luci-app-poweroff</a></li></ol><h2 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h2><ul><li><p>2021&#x2F;06&#x2F;21</p><p>（请下6月21日凌晨3点之后的版本）</p><ol><li>添加JD签到插件，方便获取cookies</li><li>adg添加两项广告过滤规则（视频过滤，手机广告过滤)</li><li>更换一套新主题（目前主题挑选中，欢迎推荐，要求就是清爽，不要花里胡哨的）</li></ol></li><li><p>2021&#x2F;06&#x2F;20</p></li></ul><ol><li>添加PassWall的默认配置。</li><li>PassWall增加免费订阅。</li></ol><ul><li>2021&#x2F;06&#x2F;19</li></ul><ol><li>继续修复ADG核心更新失败的问题。</li><li>添加Docker运行环境。</li><li>添加DockerMan管理插件。</li></ol><ul><li>2021&#x2F;06&#x2F;18</li></ul><ol><li>尝试集成adg，smartdns配置信息，争取做到开箱即用。</li></ol><ul><li>2021&#x2F;06&#x2F;12</li></ul><ol><li>第一补全说明,懒得写啦,功能就那几个而已.</li><li>下次一定</li></ol><h2 id="已知问题"><a href="#已知问题" class="headerlink" title="已知问题"></a>已知问题</h2><ul><li><p>AdGuardHome 无法更新核心,重复提示:A task is already running.【最新版本已经解决更新问题，该方法可作为参考使用】</p><p>解决方法:</p></li></ul><ol><li><p>确认路由器是否联网成功.<br>  通过 网络 -&gt; 网络诊断 -&gt; NSLOOKUP 按钮是否能够获取到openwrt.org的解析地址判断.</p></li><li><p>多次点击更新按钮依然出现 A task is already running. 是因为部分机型在代码中 check_if_already_running 检测机制被卡住造成.</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">只需通过TTYD终端插件通过以下方式即可:</span><br><span class="line">1. 命令 cd /usr/share/AdGuardHome</span><br><span class="line">2. 命令 vi update_core.sh</span><br><span class="line">3. 按键盘i键进入编译模式</span><br><span class="line">4. 将以下代码注意掉(注释方法为行首添加#)</span><br><span class="line">注释掉内容页最上方的check_if_already_running函数</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">PATH=&quot;/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">binpath=$(uci get AdGuardHome.AdGuardHome.binpath)</span><br><span class="line">if [ -z &quot;$binpath&quot; ]; then</span><br><span class="line">uci set AdGuardHome.AdGuardHome.binpath=&quot;/tmp/AdGuardHome/AdGuardHome&quot;</span><br><span class="line">binpath=&quot;/tmp/AdGuardHome/AdGuardHome&quot;</span><br><span class="line">fi</span><br><span class="line">mkdir -p $&#123;binpath%/*&#125;</span><br><span class="line">upxflag=$(uci get AdGuardHome.AdGuardHome.upxflag 2&gt;/dev/null)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="function"><span class="title">check_if_already_running</span></span>()&#123;</span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">       running_tasks=<span class="string">&quot;<span class="subst">$(ps |grep <span class="string">&quot;AdGuardHome&quot;</span> |grep <span class="string">&quot;update_core&quot;</span> |grep -v <span class="string">&quot;grep&quot;</span> |awk &#x27;&#123;print $1&#125;&#x27; |wc -l)</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">       [ <span class="string">&quot;<span class="variable">$&#123;running_tasks&#125;</span>&quot;</span> -gt <span class="string">&quot;2&quot;</span> ] &amp;&amp; <span class="built_in">echo</span> -e <span class="string">&quot;\nA task is already running.&quot;</span>  &amp;&amp; EXIT 2</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&#125;</span></span><br><span class="line"></span><br><span class="line">check_wgetcurl()&#123;</span><br><span class="line">      which curl &amp;&amp; downloader=&quot;curl -L -k --retry 2 --connect-timeout 20 -o&quot; &amp;&amp; return</span><br><span class="line">      which wget &amp;&amp; downloader=&quot;wget --no-check-certificate -t 2 -T 20 -O&quot; &amp;&amp; return</span><br><span class="line">      [ -z &quot;$1&quot; ] &amp;&amp; opkg update || (echo error opkg &amp;&amp; EXIT 1)</span><br><span class="line">      [ -z &quot;$1&quot; ] &amp;&amp; (opkg remove wget wget-nossl --force-depends ; opkg install wget ; check_wgetcurl 1 ;return)</span><br><span class="line">      [ &quot;$1&quot; == &quot;1&quot; ] &amp;&amp; (opkg install curl ; check_wgetcurl 2 ; return)</span><br><span class="line">      echo error curl and wget &amp;&amp; EXIT 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注释掉内容页最下方Main函数中的check_if_already_running即可</span><br><span class="line"></span><br><span class="line">main()&#123;  </span><br><span class="line">      #check_if_already_running                                       </span><br><span class="line">      check_latest_version</span><br><span class="line">      $1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题反馈"><a href="#问题反馈" class="headerlink" title="问题反馈"></a>问题反馈</h2><ol><li>提交 lssues</li><li>通过QQ群联系我.</li></ol><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>感谢以下开源作者的开源项目以及详尽的文档,排名不分先后.</p><p><a href="https://github.com/P3TERX">P3TERX</a></p><p><a href="https://github.com/coolsnowwolf">coolsnowwolf</a></p><p><a href="https://github.com/kenzok8">kenzok8</a></p><p><a href="https://github.com/pymumu">Nick Peng</a></p><p><a href="https://github.com/tty228">tty228</a></p><p><a href="https://github.com/ozon">Harry Gabriel</a></p>]]></content>
      
      
      <categories>
          
          <category> OpenWRT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenWRT </tag>
            
            <tag> LEDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LEDE-Firmware-Lite-Build</title>
      <link href="/posts/8391f167/"/>
      <url>/posts/8391f167/</url>
      
        <content type="html"><![CDATA[<h1 id="固件介绍"><a href="#固件介绍" class="headerlink" title="固件介绍"></a>固件介绍</h1><p>本固件订制原则是功能最小化，稳定运行为主，尤其适合作为单网口旁路有，虚拟机旁路有运行使用，同时也可作为对7x24稳定运行的朋友使用。</p><ul><li>固件仅在原版lede基础上精简、添加日常常用到插件：</li></ul><ol><li>passwall       （翻墙）</li><li>AdGuardHome     (广告过滤)</li><li>SmartDNS       （DNS加速）</li><li>微信推送姬      （运行状态通知）</li><li>动态DNS        （IP绑定）</li><li>网络唤醒       （内网设备启动）</li><li>KMS服务器      （内网windows家族软件激活）</li><li>TTYD终端       （超级方便的web ssh)</li><li>JD签到插件      （挂豆，获取cookies超方便）</li></ol><ul><li>重要提醒</li></ul><p>我的固件主要目的是满足翻墙-&gt;域名加速、防劫持-&gt;广告过滤，所以插件的设置存在设置逻辑，错误的修改和关闭、启用关联的插件会造成无法通过域名的访问，插件的逻辑为passwall（提供翻墙服务，是否启用不会造成无法访问域名的情况）-&gt; AdGuardHome(提供广告过滤和DNS服务功能，所以该功能必须启用) -&gt; SmartDNS（提供DNS防劫持和域名加速访问功能，如果你不了解该插件请只设置下面提到的【CN-ISP】，不要改动其它设置).</p><p>所以你的设置步骤应该是：【网络】【接口】-&gt;【SmartDNS】【CN-ISP】-&gt;【AdGuradHome】【更新核心】【使用53端口替换dnsmasq】【选择过滤规则】-&gt;可选使用【PassWall】插件。</p><ul><li>你需要知道的信息</li></ul><ol><li>默认IP:192.168.100.200</li><li>路由账号:root</li><li>路由密码:password</li><li>adg账号:admin</li><li>adg密码:password</li><li>passwall默认已添加免费订阅地址（订阅页 - 更新订阅信息即可获取地址)，然后进入passwall插件 【基本设置】 - 【主要】 将其中的【默认】选项中的【直连】改为获取到的机场，最后启用【主开关】，点击【保存】即可使用。</li><li>AdGuradHome插件需要先点击【更新核心版本】升级到最新核心，将【重定向】选项改为【使用53端口替换dnsmasq】，然后【保存】即可正常开始使用了。（如果需要广告过滤请点击【AdGuradHome Web:3000】按钮后，选择【过滤器】 - 【DNS封锁清单】，将需要的过滤规则启用即可。</li><li>SmartDNS我已经配置好了，你只需要将【上游服务器】中的【CN-ISP】中的IP改为你所在地运营商的DNS IP即可。（SmartDNS的作用主要是防污染和解析加速）</li></ol><ul><li>使用的主题：</li></ul><ol><li>opentomcat</li></ol><h2 id="插件源"><a href="#插件源" class="headerlink" title="插件源"></a>插件源</h2><p>为保证固件的绝对安全，本固件只使用lean’s作者、社区高度认可插件包、源头作者开源的插件.</p><ul><li>kenzok8的插件包</li></ul><ol><li><a href="https://github.com/kenzok8/openwrt-packages">https://github.com/kenzok8/openwrt-packages</a></li><li><a href="https://github.com/kenzok8/small">https://github.com/kenzok8/small</a></li></ol><ul><li>esirplayground的关机插件</li></ul><ol><li><a href="https://github.com/esirplayground/luci-app-poweroff">https://github.com/esirplayground/luci-app-poweroff</a></li></ol><h2 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h2><ul><li><p>2021&#x2F;06&#x2F;21</p><p>（请下6月21日凌晨3点之后的版本）</p><ol><li>添加JD签到插件，方便获取cookies</li><li>adg添加两项广告过滤规则（视频过滤，手机广告过滤)</li><li>更换一套新主题（目前主题挑选中，欢迎推荐，要求就是清爽，不要花里胡哨的）</li></ol></li><li><p>2021&#x2F;06&#x2F;20</p></li></ul><ol><li>添加PassWall的默认配置。</li><li>PassWall增加免费订阅。</li></ol><ul><li>2021&#x2F;06&#x2F;19</li></ul><ol><li>继续修复ADG核心更新失败的问题。</li></ol><ul><li>2021&#x2F;06&#x2F;18</li></ul><ol><li>尝试集成adg，smartdns配置信息，争取做到开箱即用。</li></ol><ul><li>2021&#x2F;06&#x2F;12</li></ul><ol><li>第一补全说明,懒得写啦,功能就那几个而已.</li><li>下次一定</li></ol><h2 id="已知问题"><a href="#已知问题" class="headerlink" title="已知问题"></a>已知问题</h2><ul><li><p>AdGuardHome 无法更新核心,重复提示:A task is already running.【最新版本已经解决更新问题，该方法可作为参考使用】</p><p>解决方法:</p></li></ul><ol><li><p>确认路由器是否联网成功.<br> 通过 网络 -&gt; 网络诊断 -&gt; NSLOOKUP 按钮是否能够获取到openwrt.org的解析地址判断.</p></li><li><p>多次点击更新按钮依然出现 A task is already running. 是因为部分机型在代码中 check_if_already_running 检测机制被卡住造成.</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">只需通过TTYD终端插件通过以下方式即可:</span><br><span class="line">1. 命令 cd /usr/share/AdGuardHome</span><br><span class="line">2. 命令 vi update_core.sh</span><br><span class="line">3. 按键盘i键进入编译模式</span><br><span class="line">4. 将以下代码注意掉(注释方法为行首添加#)</span><br><span class="line">注释掉内容页最上方的check_if_already_running函数</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">PATH=&quot;/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">binpath=$(uci get AdGuardHome.AdGuardHome.binpath)</span><br><span class="line">if [ -z &quot;$binpath&quot; ]; then</span><br><span class="line">uci set AdGuardHome.AdGuardHome.binpath=&quot;/tmp/AdGuardHome/AdGuardHome&quot;</span><br><span class="line">binpath=&quot;/tmp/AdGuardHome/AdGuardHome&quot;</span><br><span class="line">fi</span><br><span class="line">mkdir -p $&#123;binpath%/*&#125;</span><br><span class="line">upxflag=$(uci get AdGuardHome.AdGuardHome.upxflag 2&gt;/dev/null)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="function"><span class="title">check_if_already_running</span></span>()&#123;</span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">       running_tasks=<span class="string">&quot;<span class="subst">$(ps |grep <span class="string">&quot;AdGuardHome&quot;</span> |grep <span class="string">&quot;update_core&quot;</span> |grep -v <span class="string">&quot;grep&quot;</span> |awk &#x27;&#123;print $1&#125;&#x27; |wc -l)</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">       [ <span class="string">&quot;<span class="variable">$&#123;running_tasks&#125;</span>&quot;</span> -gt <span class="string">&quot;2&quot;</span> ] &amp;&amp; <span class="built_in">echo</span> -e <span class="string">&quot;\nA task is already running.&quot;</span>  &amp;&amp; EXIT 2</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&#125;</span></span><br><span class="line"></span><br><span class="line">check_wgetcurl()&#123;</span><br><span class="line">      which curl &amp;&amp; downloader=&quot;curl -L -k --retry 2 --connect-timeout 20 -o&quot; &amp;&amp; return</span><br><span class="line">      which wget &amp;&amp; downloader=&quot;wget --no-check-certificate -t 2 -T 20 -O&quot; &amp;&amp; return</span><br><span class="line">      [ -z &quot;$1&quot; ] &amp;&amp; opkg update || (echo error opkg &amp;&amp; EXIT 1)</span><br><span class="line">      [ -z &quot;$1&quot; ] &amp;&amp; (opkg remove wget wget-nossl --force-depends ; opkg install wget ; check_wgetcurl 1 ;return)</span><br><span class="line">      [ &quot;$1&quot; == &quot;1&quot; ] &amp;&amp; (opkg install curl ; check_wgetcurl 2 ; return)</span><br><span class="line">      echo error curl and wget &amp;&amp; EXIT 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注释掉内容页最下方Main函数中的check_if_already_running即可</span><br><span class="line"></span><br><span class="line">main()&#123;  </span><br><span class="line">      #check_if_already_running                                       </span><br><span class="line">      check_latest_version</span><br><span class="line">      $1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题反馈"><a href="#问题反馈" class="headerlink" title="问题反馈"></a>问题反馈</h2><ol><li>提交 lssues</li><li>通过QQ群联系我.</li></ol><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>感谢以下开源作者的开源项目以及详尽的文档,排名不分先后.</p><p><a href="https://github.com/P3TERX">P3TERX</a></p><p><a href="https://github.com/coolsnowwolf">coolsnowwolf</a></p><p><a href="https://github.com/kenzok8">kenzok8</a></p><p><a href="https://github.com/pymumu">Nick Peng</a></p><p><a href="https://github.com/tty228">tty228</a></p><p><a href="https://github.com/ozon">Harry Gabriel</a></p>]]></content>
      
      
      <categories>
          
          <category> OpenWRT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenWRT </tag>
            
            <tag> LEDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarsBoard A20 Linux SDK For Ubuntu 14.04 开发环境配置</title>
      <link href="/posts/205dc920/"/>
      <url>/posts/205dc920/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>最近翻出来多年前购买投影仪赠送的一个网络机顶盒，打算研究下将移植下linux作为一个低功耗的下载机或者个Blog服务器玩玩，根据自带的SDK指导文本发现要求的Ubuntu 12.04已经无法正常使用，试了种种办法依然无法搞定软件源，最后尝试使用Ubuntu 14.04 lts版进行部署，经过各种测试终于成功生成Linux固件，写一篇Blog作为记录，也能够帮助同样有需求的朋友。</p><h1 id="工具、系统准备"><a href="#工具、系统准备" class="headerlink" title="工具、系统准备"></a>工具、系统准备</h1><p>系统镜像Ubuntu 14.04.6 LTS：<a href="http://releases.ubuntu.com/14.04/ubuntu-14.04.6-desktop-amd64.iso">官网镜像</a><br>MarsBoard A20 Linux SDK：<a href="http://www.haoyuelectronics.com/service/A10-A20/A20-Linux-SDK/">官网下载</a></p><h1 id="依赖环境安装"><a href="#依赖环境安装" class="headerlink" title="依赖环境安装"></a>依赖环境安装</h1><h3 id="依次安装以下依赖："><a href="#依次安装以下依赖：" class="headerlink" title="依次安装以下依赖："></a>依次安装以下依赖：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt install lib32bz2-1.0</span><br><span class="line">sudo apt install ncurses-dev</span><br><span class="line">sudo apt install build-essential git u-boot-tools</span><br><span class="line">sudo apt install texinfo texlive ccache zlib1g-dev gawk bison flex gettext uuid-dev</span><br><span class="line">sudo apt install binutils-arm-linux-gnueabihf gcc-arm-linux-gnueabi</span><br><span class="line">sudo apt install gcc-arm-linux-gnueabihf cpp-arm-linux-gnueabihf</span><br><span class="line">sudo apt install libusb-1.0-0 libusb-1.0-0-dev</span><br><span class="line">sudo apt install git wget fakeroot kernel-package zlib1g-dev libncurses5-dev </span><br><span class="line">sudo apt install lib32stdc++6</span><br></pre></td></tr></table></figure><h3 id="初始化环境变量："><a href="#初始化环境变量：" class="headerlink" title="初始化环境变量："></a>初始化环境变量：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据提示选择</span></span><br><span class="line">source tools/scripts/envsetup.sh</span><br></pre></td></tr></table></figure><img src="/posts/205dc920/20210822050846590.png" class=""><h3 id="配置输出接口配置"><a href="#配置输出接口配置" class="headerlink" title="配置输出接口配置"></a>配置输出接口配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp products/marsboard-a20-ubuntu/configs/HDMI/sys_config-nand.fex products/marsboard-a20-ubuntu/configs/sys_config.fex</span><br></pre></td></tr></table></figure><h3 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MarsBoard_build_nand_image</span><br></pre></td></tr></table></figure><h3 id="输入密码"><a href="#输入密码" class="headerlink" title="输入密码"></a>输入密码</h3><img src="/posts/205dc920/20210822052646786.png" class=""><h3 id="等待编译成功"><a href="#等待编译成功" class="headerlink" title="等待编译成功"></a>等待编译成功</h3><img src="/posts/205dc920/20210822055225689.png" class="">]]></content>
      
      
      <categories>
          
          <category> 搞机一下 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ARMLinux </tag>
            
            <tag> HiMedia Q2ii </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
